{"ast":null,"code":"var _jsxFileName = \"/Users/oxana/thereminvox/app/javascript/components/synths/PolySynth.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport Tone from 'tone';\nimport PlaySwitch from '../controls/PlaySwitch';\nimport ToggleSwitch from '../controls/ToggleSwitch';\nimport Slider from '../controls/Slider';\nimport Knob from '../controls/Knob';\nimport ButtonSet from '../controls/ButtonSet';\n\nvar PolySynth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PolySynth, _React$Component);\n\n  function PolySynth(props) {\n    var _this;\n\n    _classCallCheck(this, PolySynth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PolySynth).call(this, props));\n\n    _.bindAll(_assertThisInitialized(_this), 'handleValueChange');\n\n    return _this;\n  }\n\n  _createClass(PolySynth, [{\n    key: \"handleValueChange\",\n    value: function handleValueChange(name, property, value) {\n      var changeSynthValue = this.props.changeSynthValue;\n      changeSynthValue(name, property, value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          synth = _this$props.synth,\n          on = _this$props.on,\n          togglePlay = _this$props.togglePlay;\n      var _this$state = this.state,\n          leadSynth = _this$state.leadSynth,\n          leadAutoPanner = _this$state.leadAutoPanner,\n          leadAutoWah = _this$state.leadAutoWah,\n          leadBitCrusher = _this$state.leadBitCrusher,\n          leadChebyshev = _this$state.leadChebyshev,\n          leadDistortion = _this$state.leadDistortion,\n          leadFeedbackEffect = _this$state.leadFeedbackEffect,\n          leadJcReverb = _this$state.leadJcReverb,\n          leadPitchShift = _this$state.leadPitchShift,\n          leadReverb = _this$state.leadReverb,\n          leadStereoWidener = _this$state.leadStereoWidener,\n          leadTremolo = _this$state.leadTremolo,\n          leadVibrato = _this$state.leadVibrato,\n          loop3 = _this$state.loop3,\n          part1 = _this$state.part1;\n      var _toggleEffect = this.toggleEffect,\n          toggleLoop = this.toggleLoop,\n          togglePart = this.togglePart,\n          changeSynthValue = this.changeSynthValue,\n          changeEffectWetValue = this.changeEffectWetValue,\n          changeEffectValue = this.changeEffectValue,\n          changeEffectFilterValue = this.changeEffectFilterValue;\n      return React.createElement(\"div\", {\n        className: \"Effect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"playButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(PlaySwitch, {\n        value: \"Synth\",\n        current: on,\n        handleClick: togglePlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })), React.createElement(AutoPanner, Object.assign({}, leadAutoPanner, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadAutoPanner');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), React.createElement(AutoWah, Object.assign({}, leadAutoWah, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadAutoWah');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(BitCrusher, Object.assign({}, leadBitCrusher, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadBitCrusher');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })), React.createElement(Chebyshev, Object.assign({}, leadChebyshev, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadChebyshev');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(Distortion, Object.assign({}, leadDistortion, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadDistortion');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(FeedbackEffect, Object.assign({}, leadFeedbackEffect, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadFeedbackEffect');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(JcReverb, Object.assign({}, leadJcReverb, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadJcReverb');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })), React.createElement(PitchShift, Object.assign({}, leadPitchShift, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadPitchShift');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })), React.createElement(Reverb, Object.assign({}, leadReverb, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadReverb');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(StereoWidener, Object.assign({}, leadStereoWidener, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadStereoWidener');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })), React.createElement(Tremolo, Object.assign({}, leadTremolo, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadTremolo');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), React.createElement(Vibrato, Object.assign({}, leadVibrato, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadVibrato');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return PolySynth;\n}(React.Component);\n\nexport { PolySynth as default };","map":{"version":3,"sources":["/Users/oxana/thereminvox/app/javascript/components/synths/PolySynth.jsx"],"names":["_","React","Tone","PlaySwitch","ToggleSwitch","Slider","Knob","ButtonSet","PolySynth","props","bindAll","name","property","value","changeSynthValue","synth","on","togglePlay","state","leadSynth","leadAutoPanner","leadAutoWah","leadBitCrusher","leadChebyshev","leadDistortion","leadFeedbackEffect","leadJcReverb","leadPitchShift","leadReverb","leadStereoWidener","leadTremolo","leadVibrato","loop3","part1","toggleEffect","toggleLoop","togglePart","changeEffectWetValue","changeEffectValue","changeEffectFilterValue","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;;IAEqBC,S;;;;;AACnB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AACAT,IAAAA,CAAC,CAACU,OAAF,gCAAgB,mBAAhB;;AAFiB;AAGlB;;;;sCAEiBC,I,EAAMC,Q,EAAUC,K,EAAO;AAAA,UAC/BC,gBAD+B,GACV,KAAKL,KADK,CAC/BK,gBAD+B;AAEvCA,MAAAA,gBAAgB,CAACH,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,CAAhB;AACD;;;6BAEQ;AAAA,wBAC2B,KAAKJ,KADhC;AAAA,UACCM,KADD,eACCA,KADD;AAAA,UACQC,EADR,eACQA,EADR;AAAA,UACYC,UADZ,eACYA,UADZ;AAAA,wBAmBH,KAAKC,KAnBF;AAAA,UAILC,SAJK,eAILA,SAJK;AAAA,UAKLC,cALK,eAKLA,cALK;AAAA,UAMLC,WANK,eAMLA,WANK;AAAA,UAOLC,cAPK,eAOLA,cAPK;AAAA,UAQLC,aARK,eAQLA,aARK;AAAA,UASLC,cATK,eASLA,cATK;AAAA,UAULC,kBAVK,eAULA,kBAVK;AAAA,UAWLC,YAXK,eAWLA,YAXK;AAAA,UAYLC,cAZK,eAYLA,cAZK;AAAA,UAaLC,UAbK,eAaLA,UAbK;AAAA,UAcLC,iBAdK,eAcLA,iBAdK;AAAA,UAeLC,WAfK,eAeLA,WAfK;AAAA,UAgBLC,WAhBK,eAgBLA,WAhBK;AAAA,UAiBLC,KAjBK,eAiBLA,KAjBK;AAAA,UAkBLC,KAlBK,eAkBLA,KAlBK;AAAA,UAsBLC,aAtBK,GA6BH,IA7BG,CAsBLA,YAtBK;AAAA,UAuBLC,UAvBK,GA6BH,IA7BG,CAuBLA,UAvBK;AAAA,UAwBLC,UAxBK,GA6BH,IA7BG,CAwBLA,UAxBK;AAAA,UAyBLtB,gBAzBK,GA6BH,IA7BG,CAyBLA,gBAzBK;AAAA,UA0BLuB,oBA1BK,GA6BH,IA7BG,CA0BLA,oBA1BK;AAAA,UA2BLC,iBA3BK,GA6BH,IA7BG,CA2BLA,iBA3BK;AAAA,UA4BLC,uBA5BK,GA6BH,IA7BG,CA4BLA,uBA5BK;AA+BP,aACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAC,OAAlB;AAA0B,QAAA,OAAO,EAAEvB,EAAnC;AAAuC,QAAA,WAAW,EAAEC,UAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE,oBAAC,UAAD,oBACMG,cADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMc,aAAY,CAAC,gBAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF,EAUE,oBAAC,OAAD,oBACMjB,WADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMa,aAAY,CAAC,aAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAVF,EAgBE,oBAAC,UAAD,oBACMhB,cADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMY,aAAY,CAAC,gBAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAhBF,EAsBE,oBAAC,SAAD,oBACMf,aADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMW,aAAY,CAAC,eAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAtBF,EA4BE,oBAAC,UAAD,oBACMd,cADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMU,aAAY,CAAC,gBAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA5BF,EAkCE,oBAAC,cAAD,oBACMb,kBADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMS,aAAY,CAAC,oBAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAlCF,EAwCE,oBAAC,QAAD,oBACMZ,YADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMQ,aAAY,CAAC,cAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAxCF,EA8CE,oBAAC,UAAD,oBACMX,cADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMO,aAAY,CAAC,gBAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA9CF,EAoDE,oBAAC,MAAD,oBACMV,UADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMM,aAAY,CAAC,YAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SApDF,EA0DE,oBAAC,aAAD,oBACMT,iBADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMK,aAAY,CAAC,mBAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA1DF,EAgEE,oBAAC,OAAD,oBACMR,WADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMI,aAAY,CAAC,aAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAhEF,EAsEE,oBAAC,OAAD,oBACMP,WADN;AAEE,QAAA,YAAY,EAAE;AAAA,iBAAMG,aAAY,CAAC,aAAD,CAAlB;AAAA,SAFhB;AAGE,QAAA,oBAAoB,EAAEG,oBAHxB;AAIE,QAAA,iBAAiB,EAAEC,iBAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAtEF,CADF;AA+ED;;;;EAzHoCrC,KAAK,CAACuC,S;;SAAxBhC,S","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport Tone from 'tone'\n\nimport PlaySwitch from '../controls/PlaySwitch'\nimport ToggleSwitch from '../controls/ToggleSwitch'\nimport Slider from '../controls/Slider'\nimport Knob from '../controls/Knob'\nimport ButtonSet from '../controls/ButtonSet'\n\nexport default class PolySynth extends React.Component {\n  constructor(props) {\n    super(props)\n    _.bindAll(this, 'handleValueChange')\n  }\n\n  handleValueChange(name, property, value) {\n    const { changeSynthValue } = this.props\n    changeSynthValue(name, property, value)\n  }\n\n  render() {\n    const { synth, on, togglePlay } = this.props\n\n    let {\n      leadSynth,\n      leadAutoPanner,\n      leadAutoWah,\n      leadBitCrusher,\n      leadChebyshev,\n      leadDistortion,\n      leadFeedbackEffect,\n      leadJcReverb,\n      leadPitchShift,\n      leadReverb,\n      leadStereoWidener,\n      leadTremolo,\n      leadVibrato,\n      loop3,\n      part1\n    } = this.state\n\n    let {\n      toggleEffect,\n      toggleLoop,\n      togglePart,\n      changeSynthValue,\n      changeEffectWetValue,\n      changeEffectValue,\n      changeEffectFilterValue\n    } = this\n\n    return (\n      <div className=\"Effect\">\n        <div className=\"playButton\">\n          <PlaySwitch value=\"Synth\" current={on} handleClick={togglePlay} />\n        </div>\n        <AutoPanner\n          {...leadAutoPanner}\n          toggleEffect={() => toggleEffect('leadAutoPanner')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <AutoWah\n          {...leadAutoWah}\n          toggleEffect={() => toggleEffect('leadAutoWah')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <BitCrusher\n          {...leadBitCrusher}\n          toggleEffect={() => toggleEffect('leadBitCrusher')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <Chebyshev\n          {...leadChebyshev}\n          toggleEffect={() => toggleEffect('leadChebyshev')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <Distortion\n          {...leadDistortion}\n          toggleEffect={() => toggleEffect('leadDistortion')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <FeedbackEffect\n          {...leadFeedbackEffect}\n          toggleEffect={() => toggleEffect('leadFeedbackEffect')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <JcReverb\n          {...leadJcReverb}\n          toggleEffect={() => toggleEffect('leadJcReverb')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <PitchShift\n          {...leadPitchShift}\n          toggleEffect={() => toggleEffect('leadPitchShift')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <Reverb\n          {...leadReverb}\n          toggleEffect={() => toggleEffect('leadReverb')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <StereoWidener\n          {...leadStereoWidener}\n          toggleEffect={() => toggleEffect('leadStereoWidener')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <Tremolo\n          {...leadTremolo}\n          toggleEffect={() => toggleEffect('leadTremolo')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n        <Vibrato\n          {...leadVibrato}\n          toggleEffect={() => toggleEffect('leadVibrato')}\n          changeEffectWetValue={changeEffectWetValue}\n          changeEffectValue={changeEffectValue}\n        />\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}