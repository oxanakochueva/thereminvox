{"ast":null,"code":"var _jsxFileName = \"/Users/oxana/thereminvox/app/javascript/containers/Synth.jsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport Tone from 'tone';\nimport * as effects from '../tunes/effects';\nimport * as parts from '../tunes/parts';\nimport * as synths from '../tunes/synths';\nimport AutoFilter from '../components/effects/AutoFilter';\nimport AutoPanner from '../components/effects/AutoPanner';\nimport AutoWah from '../components/effects/AutoWah';\nimport BitCrusher from '../components/effects/BitCrusher';\nimport Chebyshev from '../components/effects/Chebyshev';\nimport Chorus from '../components/effects/Chorus';\nimport Distortion from '../components/effects/Distortion';\nimport FeedbackDelay from '../components/effects/FeedbackDelay';\nimport FeedbackEffect from '../components/effects/FeedbackEffect';\nimport Freeverb from '../components/effects/Freeverb';\nimport JcReverb from '../components/effects/JcReverb';\nimport Phaser from '../components/effects/Phaser';\nimport PingPongDelay from '../components/effects/PingPongDelay';\nimport PitchShift from '../components/effects/PitchShift';\nimport Reverb from '../components/effects/Reverb';\nimport StereoWidener from '../components/effects/StereoWidener';\nimport Tremolo from '../components/effects/Tremolo';\nimport Vibrato from '../components/effects/Vibrato'; // import PartSynth from '../components/synths/PartSynth'\n// import NoiseSynth from '../components/synths/NoiseSynth'\n\nimport PolySynth from '../components/synths/PolySynth'; // import MetalSynth from '../components/synths/MetalSynth'\n\nvar Synth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Synth, _React$Component);\n\n  function Synth(props) {\n    var _this;\n\n    _classCallCheck(this, Synth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Synth).call(this, props));\n    var defaultWetValue = 0;\n    var leadSynth = synths.polySynth();\n    var leadAutoPanner = effects.autoPanner();\n    var leadAutoWah = effects.autoWah();\n    var leadBitCrusher = effects.bitCrusher();\n    var leadChebyshev = effects.chebyshev();\n    var leadDistortion = effects.distortion();\n    var leadFeedbackEffect = effects.feedbackEffect();\n    var leadJcReverb = effects.jcReverb();\n    var leadPitchShift = effects.pitchShift();\n    var leadReverb = effects.reverb();\n    var leadStereoWidener = effects.stereoWidener();\n    var leadTremolo = effects.tremolo();\n    var leadVibrato = effects.vibrato();\n    var loop3 = new Tone.Loop(function (time) {\n      leadSynth.triggerAttackRelease('C4', '1m', time);\n    }, '1m');\n    leadSynth.chain(leadAutoPanner, leadAutoWah, leadBitCrusher, leadChebyshev, leadDistortion, leadFeedbackEffect, leadJcReverb, leadPitchShift, leadReverb, leadStereoWidener, leadTremolo, leadVibrato, Tone.Master);\n    _this.state = {\n      leadSynth: leadSynth,\n      leadAutoPanner: {\n        name: 'leadAutoPanner',\n        effect: leadAutoPanner,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadAutoWah: {\n        name: 'leadAutoWah',\n        effect: leadAutoWah,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadBitCrusher: {\n        name: 'leadBitCrusher',\n        effect: leadBitCrusher,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadChebyshev: {\n        name: 'leadChebyshev',\n        effect: leadChebyshev,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadDistortion: {\n        name: 'leadDistortion',\n        effect: leadDistortion,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadFeedbackEffect: {\n        name: 'leadFeedbackEffect',\n        effect: leadFeedbackEffect,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadJcReverb: {\n        name: 'leadJcReverb',\n        effect: leadJcReverb,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadPitchShift: {\n        name: 'leadPitchShift',\n        effect: leadPitchShift,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadReverb: {\n        name: 'leadReverb',\n        effect: leadReverb,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadStereoWidener: {\n        name: 'leadStereoWidener',\n        effect: leadStereoWidener,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadTremolo: {\n        name: 'leadTremolo',\n        effect: leadTremolo,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadVibrato: {\n        name: 'leadVibrato',\n        effect: leadVibrato,\n        wet: defaultWetValue,\n        on: false\n      },\n      loop3: {\n        loop: loop3,\n        on: false\n      },\n      part1: {\n        part: parts.part1(leadSynth),\n        on: false\n      },\n      lastChange: Date.now(),\n      timeout: 100\n    };\n\n    _.bindAll(_assertThisInitialized(_this), 'toggleLoop', 'togglePart', 'changeSynthValue', 'toggleEffect', 'changeEffectWetValue', 'changeEffectValue');\n\n    Tone.Transport.bpm.value = 130;\n    Tone.Transport.start();\n    return _this;\n  }\n\n  _createClass(Synth, [{\n    key: \"toggleLoop\",\n    value: function toggleLoop(loopName) {\n      var _this$state$loopName = this.state[loopName],\n          loop = _this$state$loopName.loop,\n          on = _this$state$loopName.on;\n      on == true ? loop.stop() : loop.start('0m');\n      this.setState(_defineProperty({}, \"\".concat(loopName), {\n        loop: loop,\n        on: !on\n      }));\n    }\n  }, {\n    key: \"togglePart\",\n    value: function togglePart(partName) {\n      var _this$state$partName = this.state[partName],\n          part = _this$state$partName.part,\n          on = _this$state$partName.on;\n\n      if (on == true) {\n        part.stop();\n      } else {\n        console.log('yo');\n        part.at('1m');\n        part.start(0);\n        part.loop = true;\n        part.loopEnd = '8m';\n      }\n\n      this.setState(_defineProperty({}, \"\".concat(partName), {\n        part: part,\n        on: !on\n      }));\n    }\n  }, {\n    key: \"changeSynthValue\",\n    value: function changeSynthValue(synthName, effectName, value) {\n      var synth = this.state[synthName];\n      var envelope = synth.instrument.envelope;\n      envelope[effectName] = value;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        oscillator: synth.instrument.oscillator,\n        envelope: envelope\n      }));\n    }\n  }, {\n    key: \"toggleEffect\",\n    value: function toggleEffect(effectName) {\n      var _this$state$effectNam = this.state[effectName],\n          effect = _this$state$effectNam.effect,\n          wet = _this$state$effectNam.wet,\n          on = _this$state$effectNam.on;\n      effect.wet.value = on == true ? 0 : wet;\n      on = !on;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        effect: effect,\n        wet: wet,\n        on: on\n      }));\n    }\n  }, {\n    key: \"changeEffectWetValue\",\n    value: function changeEffectWetValue(effectName, value) {\n      var _this$state$effectNam2 = this.state[effectName],\n          effect = _this$state$effectNam2.effect,\n          wet = _this$state$effectNam2.wet,\n          on = _this$state$effectNam2.on;\n      effect.wet.value = on == true ? value : 0;\n      wet = value;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        effect: effect,\n        wet: wet,\n        on: on\n      }));\n    }\n  }, {\n    key: \"changeEffectValue\",\n    value: function changeEffectValue(effectName, effectProperty, value) {\n      var _this$state$effectNam3 = this.state[effectName],\n          name = _this$state$effectNam3.name,\n          effect = _this$state$effectNam3.effect,\n          wet = _this$state$effectNam3.wet,\n          on = _this$state$effectNam3.on;\n\n      if (effectProperty == 'order') {\n        value = Math.round(value);\n      }\n\n      effect[effectProperty] = value;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        name: name,\n        effect: effect,\n        wet: wet,\n        on: on\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          leadSynth = _this$state.leadSynth,\n          leadAutoPanner = _this$state.leadAutoPanner,\n          leadAutoWah = _this$state.leadAutoWah,\n          leadBitCrusher = _this$state.leadBitCrusher,\n          leadChebyshev = _this$state.leadChebyshev,\n          leadDistortion = _this$state.leadDistortion,\n          leadFeedbackEffect = _this$state.leadFeedbackEffect,\n          leadJcReverb = _this$state.leadJcReverb,\n          leadPitchShift = _this$state.leadPitchShift,\n          leadReverb = _this$state.leadReverb,\n          leadStereoWidener = _this$state.leadStereoWidener,\n          leadTremolo = _this$state.leadTremolo,\n          leadVibrato = _this$state.leadVibrato,\n          loop3 = _this$state.loop3,\n          part1 = _this$state.part1;\n      var toggleEffect = this.toggleEffect,\n          toggleLoop = this.toggleLoop,\n          togglePart = this.togglePart,\n          changeSynthValue = this.changeSynthValue,\n          changeEffectWetValue = this.changeEffectWetValue,\n          changeEffectValue = this.changeEffectValue,\n          changeEffectFilterValue = this.changeEffectFilterValue;\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(PolySynth, {\n        synth: \"leadSynth\",\n        instrument: leadSynth,\n        on: loop3.on,\n        togglePlay: function togglePlay() {\n          return togglePart('loop3');\n        },\n        changeSynthValue: changeSynthValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Synth;\n}(React.Component);\n\nexport { Synth as default };","map":{"version":3,"sources":["/Users/oxana/thereminvox/app/javascript/containers/Synth.jsx"],"names":["_","React","Tone","effects","parts","synths","AutoFilter","AutoPanner","AutoWah","BitCrusher","Chebyshev","Chorus","Distortion","FeedbackDelay","FeedbackEffect","Freeverb","JcReverb","Phaser","PingPongDelay","PitchShift","Reverb","StereoWidener","Tremolo","Vibrato","PolySynth","Synth","props","defaultWetValue","leadSynth","polySynth","leadAutoPanner","autoPanner","leadAutoWah","autoWah","leadBitCrusher","bitCrusher","leadChebyshev","chebyshev","leadDistortion","distortion","leadFeedbackEffect","feedbackEffect","leadJcReverb","jcReverb","leadPitchShift","pitchShift","leadReverb","reverb","leadStereoWidener","stereoWidener","leadTremolo","tremolo","leadVibrato","vibrato","loop3","Loop","time","triggerAttackRelease","chain","Master","state","name","effect","wet","on","loop","part1","part","lastChange","Date","now","timeout","bindAll","Transport","bpm","value","start","loopName","stop","setState","partName","console","log","at","loopEnd","synthName","effectName","synth","envelope","instrument","oscillator","effectProperty","Math","round","toggleEffect","toggleLoop","togglePart","changeSynthValue","changeEffectWetValue","changeEffectValue","changeEffectFilterValue","Component"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport Tone from 'tone'\n\nimport * as effects from '../tunes/effects'\nimport * as parts from '../tunes/parts'\nimport * as synths from '../tunes/synths'\n\nimport AutoFilter from '../components/effects/AutoFilter'\nimport AutoPanner from '../components/effects/AutoPanner'\nimport AutoWah from '../components/effects/AutoWah'\nimport BitCrusher from '../components/effects/BitCrusher'\nimport Chebyshev from '../components/effects/Chebyshev'\nimport Chorus from '../components/effects/Chorus'\nimport Distortion from '../components/effects/Distortion'\nimport FeedbackDelay from '../components/effects/FeedbackDelay'\nimport FeedbackEffect from '../components/effects/FeedbackEffect'\nimport Freeverb from '../components/effects/Freeverb'\nimport JcReverb from '../components/effects/JcReverb'\nimport Phaser from '../components/effects/Phaser'\nimport PingPongDelay from '../components/effects/PingPongDelay'\nimport PitchShift from '../components/effects/PitchShift'\nimport Reverb from '../components/effects/Reverb'\nimport StereoWidener from '../components/effects/StereoWidener'\nimport Tremolo from '../components/effects/Tremolo'\nimport Vibrato from '../components/effects/Vibrato'\n\n// import PartSynth from '../components/synths/PartSynth'\n// import NoiseSynth from '../components/synths/NoiseSynth'\nimport PolySynth from '../components/synths/PolySynth'\n// import MetalSynth from '../components/synths/MetalSynth'\n\nexport default class Synth extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const defaultWetValue = 0\n\n    let leadSynth = synths.polySynth()\n    let leadAutoPanner = effects.autoPanner()\n    let leadAutoWah = effects.autoWah()\n    let leadBitCrusher = effects.bitCrusher()\n    let leadChebyshev = effects.chebyshev()\n    let leadDistortion = effects.distortion()\n    let leadFeedbackEffect = effects.feedbackEffect()\n    let leadJcReverb = effects.jcReverb()\n    let leadPitchShift = effects.pitchShift()\n    let leadReverb = effects.reverb()\n    let leadStereoWidener = effects.stereoWidener()\n    let leadTremolo = effects.tremolo()\n    let leadVibrato = effects.vibrato()\n\n    let loop3 = new Tone.Loop(function(time) {\n      leadSynth.triggerAttackRelease('C4', '1m', time)\n    }, '1m')\n\n    leadSynth.chain(\n      leadAutoPanner,\n      leadAutoWah,\n      leadBitCrusher,\n      leadChebyshev,\n      leadDistortion,\n      leadFeedbackEffect,\n      leadJcReverb,\n      leadPitchShift,\n      leadReverb,\n      leadStereoWidener,\n      leadTremolo,\n      leadVibrato,\n      Tone.Master\n    )\n\n    this.state = {\n      leadSynth,\n      leadAutoPanner: {\n        name: 'leadAutoPanner',\n        effect: leadAutoPanner,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadAutoWah: {\n        name: 'leadAutoWah',\n        effect: leadAutoWah,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadBitCrusher: {\n        name: 'leadBitCrusher',\n        effect: leadBitCrusher,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadChebyshev: {\n        name: 'leadChebyshev',\n        effect: leadChebyshev,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadDistortion: {\n        name: 'leadDistortion',\n        effect: leadDistortion,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadFeedbackEffect: {\n        name: 'leadFeedbackEffect',\n        effect: leadFeedbackEffect,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadJcReverb: {\n        name: 'leadJcReverb',\n        effect: leadJcReverb,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadPitchShift: {\n        name: 'leadPitchShift',\n        effect: leadPitchShift,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadReverb: {\n        name: 'leadReverb',\n        effect: leadReverb,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadStereoWidener: {\n        name: 'leadStereoWidener',\n        effect: leadStereoWidener,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadTremolo: {\n        name: 'leadTremolo',\n        effect: leadTremolo,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadVibrato: {\n        name: 'leadVibrato',\n        effect: leadVibrato,\n        wet: defaultWetValue,\n        on: false\n      },\n      loop3: {\n        loop: loop3,\n        on: false\n      },\n      part1: {\n        part: parts.part1(leadSynth),\n        on: false\n      },\n      lastChange: Date.now(),\n      timeout: 100\n    }\n\n    _.bindAll(\n      this,\n      'toggleLoop',\n      'togglePart',\n      'changeSynthValue',\n      'toggleEffect',\n      'changeEffectWetValue',\n      'changeEffectValue'\n    )\n\n    Tone.Transport.bpm.value = 130\n\n    Tone.Transport.start()\n  }\n\n  toggleLoop(loopName) {\n    let { loop, on } = this.state[loopName]\n\n    on == true ? loop.stop() : loop.start('0m')\n\n    this.setState({\n      [`${loopName}`]: {\n        loop: loop,\n        on: !on\n      }\n    })\n  }\n\n  togglePart(partName) {\n    let { part, on } = this.state[partName]\n\n    if (on == true) {\n      part.stop()\n    } else {\n      console.log('yo')\n      part.at('1m')\n      part.start(0)\n      part.loop = true\n      part.loopEnd = '8m'\n    }\n\n    this.setState({\n      [`${partName}`]: {\n        part: part,\n        on: !on\n      }\n    })\n  }\n\n  changeSynthValue(synthName, effectName, value) {\n    let synth = this.state[synthName]\n    let envelope = synth.instrument.envelope\n    envelope[effectName] = value\n\n    this.setState({\n      [`${effectName}`]: {\n        oscillator: synth.instrument.oscillator,\n        envelope: envelope\n      }\n    })\n  }\n\n  toggleEffect(effectName) {\n    let { effect, wet, on } = this.state[effectName]\n\n    effect.wet.value = on == true ? 0 : wet\n    on = !on\n\n    this.setState({\n      [`${effectName}`]: {\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n\n  changeEffectWetValue(effectName, value) {\n    let { effect, wet, on } = this.state[effectName]\n\n    effect.wet.value = on == true ? value : 0\n    wet = value\n\n    this.setState({\n      [`${effectName}`]: {\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n  changeEffectValue(effectName, effectProperty, value) {\n    let { name, effect, wet, on } = this.state[effectName]\n\n    if (effectProperty == 'order') {\n      value = Math.round(value)\n    }\n\n    effect[effectProperty] = value\n\n    this.setState({\n      [`${effectName}`]: {\n        name,\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n\n  render() {\n    let {\n      leadSynth,\n      leadAutoPanner,\n      leadAutoWah,\n      leadBitCrusher,\n      leadChebyshev,\n      leadDistortion,\n      leadFeedbackEffect,\n      leadJcReverb,\n      leadPitchShift,\n      leadReverb,\n      leadStereoWidener,\n      leadTremolo,\n      leadVibrato,\n      loop3,\n      part1\n    } = this.state\n\n    let {\n      toggleEffect,\n      toggleLoop,\n      togglePart,\n      changeSynthValue,\n      changeEffectWetValue,\n      changeEffectValue,\n      changeEffectFilterValue\n    } = this\n\n    return (\n      <div className=\"container\">\n        <PolySynth\n          synth=\"leadSynth\"\n          instrument={leadSynth}\n          on={loop3.on}\n          togglePlay={() => togglePart('loop3')}\n          changeSynthValue={changeSynthValue}\n        />\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}