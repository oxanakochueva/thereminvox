{"ast":null,"code":"var _jsxFileName = \"/Users/oxana/thereminvox/app/javascript/containers/Thereminvox.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport Menubar from '../components/Menubar';\nimport Tone from 'tone';\n\nvar Thereminvox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Thereminvox, _React$Component);\n\n  function Thereminvox(props) {\n    var _this;\n\n    _classCallCheck(this, Thereminvox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Thereminvox).call(this, props));\n    var audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    var oscillator = audioContext.createOscillator();\n    oscillator.type = 'sine';\n    var analyser = audioContext.createAnalyser();\n    analyser.fftSize = 2048;\n    oscillator.connect(analyser);\n    _this.state = {\n      audioContext: audioContext,\n      oscillator: oscillator,\n      analyser: analyser,\n      playing: false,\n      x: 0,\n      y: 0,\n      fftData: []\n    };\n    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));\n    _this.handleStart = _this.handleStart.bind(_assertThisInitialized(_this));\n    _this.handleStop = _this.handleStop.bind(_assertThisInitialized(_this));\n    _this.handleStartOrStopClick = _this.handleStartOrStopClick.bind(_assertThisInitialized(_this));\n    _this.changeFrequency = _this.changeFrequency.bind(_assertThisInitialized(_this));\n    _this.changeDetune = _this.changeDetune.bind(_assertThisInitialized(_this));\n    _this.changeVisualization = _this.changeVisualization.bind(_assertThisInitialized(_this));\n    _this.handleSynthPlay = _this.handleSynthPlay.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Thereminvox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousemove', this.handleMouseMove);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(e) {\n      this.setState({\n        x: e.clientX,\n        y: e.clientY\n      });\n      this.changeFrequency();\n      this.changeDetune();\n      this.changeVisualization();\n    }\n  }, {\n    key: \"handleStartOrStopClick\",\n    value: function handleStartOrStopClick() {\n      var playing = this.state.playing;\n\n      if (playing) {\n        this.handleStop();\n      } else {\n        this.handleStart();\n      }\n    } // handleSynthPlay() {\n    //   // let synth = new Tone.Synth().toMaster()\n    //   // synth.triggerAttackRelease('C4', '8n')\n    //\n    //   //pattern\n    //   // let pattern = new Tone.Pattern(\n    //   //   function(time, note) {\n    //   //     synth.triggerAttackRelease(note, 0.25)\n    //   //   },\n    //   //   ['C4', 'D4', 'E4', 'G4', 'A4']\n    //   // )\n    //   // pattern.start(0)\n    //\n    //   //loop\n    //   // let loop = new Tone.Loop(function(time) {\n    //   //   synth.triggerAttackRelease('C2', '8n', time)\n    //   // }, '4n')\n    //   // loop.start('1m').stop('4m')\n    //\n    //   //pass in some initial values for the filter and filter envelope\n    //   // var synth = new Tone.Synth({\n    //   //   oscillator: {\n    //   //     type: 'pwm',\n    //   //     modulationFrequency: 0.2\n    //   //   },\n    //   //   envelope: {\n    //   //     attack: 0.02,\n    //   //     decay: 0.1,\n    //   //     sustain: 0.2,\n    //   //     release: 0.9\n    //   //   }\n    //   // }).toMaster()\n    //   //\n    //   // //start the note \"D3\" one second from now\n    //   // synth.triggerAttack('D3', '+1')\n    //\n    //   //a 4 voice Synth\n    //   // let polySynth = new Tone.PolySynth(4, Tone.Synth).toMaster()\n    //   // polySynth.triggerAttackRelease(['C4', 'E4', 'G4', 'B4'], '2n')\n    //   // let distortion = new Tone.Distortion(0.4).toMaster()\n    //   // polySynth.connect(distortion)\n    //\n    //   // Tone.Transport.scheduleRepeat(\n    //   //   function(time) {\n    //   //     note.triggerAttack(time)\n    //   //   },\n    //   //   '8n',\n    //   //   '1m'\n    //   // )\n    //\n    //   //toner\n    //   // Tone.Transport.bpm.value = 120\n    //   // Tone.Transport.start()\n    // }\n\n  }, {\n    key: \"handleSynthPlay\",\n    value: function handleSynthPlay() {\n      var loopBeat = new Tone.Loop(beat, '3n');\n      var baseBeat = new Tone.MembraneSynth({\n        pitchDecay: 0.01,\n        octaves: 2,\n        oscillator: {\n          type: 'sine'\n        },\n        envelope: {\n          attack: 0.1,\n          decay: 0.4,\n          sustain: 1,\n          release: 1.4,\n          attackCurve: 'sine'\n        }\n      }).toMaster();\n      var drums;\n      var noise = new Tone.NoiseSynth({\n        noise: {\n          type: 'brown'\n        },\n        envelope: {\n          attack: 1.5,\n          decay: 0.01,\n          sustain: 1\n        },\n        volume: -5\n      }).toMaster();\n      var metal = new Tone.MetalSynth({\n        frequency: 100,\n        envelope: {\n          attack: 0.01,\n          decay: 1.2,\n          release: 0.2\n        },\n        harmonicity: 19,\n        modulationIndex: 20,\n        resonance: 300,\n        octaves: 3\n      }).toMaster();\n\n      function beat(time) {\n        baseBeat.triggerAttackRelease('B#2', '4n', time);\n        noise.triggerAttackRelease(time);\n        metal.triggerAttackRelease('6n', time);\n      }\n\n      Tone.Transport.start();\n      loopBeat.start(0);\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var _this$state = this.state,\n          audioContext = _this$state.audioContext,\n          oscillator = _this$state.oscillator,\n          analyser = _this$state.analyser,\n          x = _this$state.x,\n          y = _this$state.y;\n      oscillator = audioContext.createOscillator();\n      oscillator.type = 'sine';\n      oscillator.frequency.setValueAtTime(x, audioContext.currentTime);\n      oscillator.connect(audioContext.destination);\n      oscillator.start();\n      analyser = audioContext.createAnalyser();\n      analyser.fftSize = 2048;\n      oscillator.connect(analyser);\n      this.setState({\n        oscillator: oscillator,\n        analyser: analyser,\n        playing: true\n      });\n    }\n  }, {\n    key: \"handleStop\",\n    value: function handleStop() {\n      var oscillator = this.state.oscillator;\n      oscillator.stop();\n      this.setState({\n        oscillator: oscillator,\n        playing: false\n      });\n    }\n  }, {\n    key: \"changeFrequency\",\n    value: function changeFrequency() {\n      var _this$state2 = this.state,\n          audioContext = _this$state2.audioContext,\n          oscillator = _this$state2.oscillator,\n          x = _this$state2.x,\n          y = _this$state2.y;\n      oscillator.frequency.setValueAtTime(x, audioContext.currentTime);\n    }\n  }, {\n    key: \"changeDetune\",\n    value: function changeDetune() {\n      var _this$state3 = this.state,\n          audioContext = _this$state3.audioContext,\n          oscillator = _this$state3.oscillator,\n          x = _this$state3.x,\n          y = _this$state3.y;\n      oscillator.detune.setValueAtTime(y, audioContext.currentTime);\n    }\n  }, {\n    key: \"changeVisualization\",\n    value: function changeVisualization() {\n      var _this$state4 = this.state,\n          analyser = _this$state4.analyser,\n          playing = _this$state4.playing;\n\n      if (playing) {\n        var bufferLength = analyser.frequencyBinCount;\n        var dataArray = new Uint8Array(bufferLength);\n        analyser.getByteTimeDomainData(dataArray);\n        this.setState({\n          fftData: dataArray\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          playing = _this$state5.playing,\n          analyser = _this$state5.analyser,\n          fftData = _this$state5.fftData;\n      var button = 'Start';\n      var data = analyser.frequencyBinCount;\n\n      if (playing) {\n        button = 'Stop';\n      }\n\n      var elements = [];\n\n      if (fftData != undefined) {\n        fftData.map(function (fftParam, i) {\n          elements.push(React.createElement(\"div\", {\n            key: i,\n            className: \"analyserCol\",\n            style: {\n              height: fftParam + 'px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237\n            },\n            __self: this\n          }));\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.handleSynthPlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"Synth\"), React.createElement(\"div\", {\n        onClick: this.handleStartOrStopClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \" \", button), React.createElement(\"div\", {\n        className: \"analyser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, elements));\n    }\n  }]);\n\n  return Thereminvox;\n}(React.Component);\n\nexport { Thereminvox as default };","map":{"version":3,"sources":["/Users/oxana/thereminvox/app/javascript/containers/Thereminvox.jsx"],"names":["React","Menubar","Tone","Thereminvox","props","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","type","analyser","createAnalyser","fftSize","connect","state","playing","x","y","fftData","handleMouseMove","bind","handleStart","handleStop","handleStartOrStopClick","changeFrequency","changeDetune","changeVisualization","handleSynthPlay","document","addEventListener","e","setState","clientX","clientY","loopBeat","Loop","beat","baseBeat","MembraneSynth","pitchDecay","octaves","envelope","attack","decay","sustain","release","attackCurve","toMaster","drums","noise","NoiseSynth","volume","metal","MetalSynth","frequency","harmonicity","modulationIndex","resonance","time","triggerAttackRelease","Transport","start","setValueAtTime","currentTime","destination","stop","detune","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByteTimeDomainData","button","data","elements","undefined","map","fftParam","i","push","height","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Menubar from '../components/Menubar'\nimport Tone from 'tone'\n\nexport default class Thereminvox extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)()\n    let oscillator = audioContext.createOscillator()\n    oscillator.type = 'sine'\n\n    let analyser = audioContext.createAnalyser()\n    analyser.fftSize = 2048\n    oscillator.connect(analyser)\n\n    this.state = {\n      audioContext: audioContext,\n      oscillator: oscillator,\n      analyser: analyser,\n      playing: false,\n      x: 0,\n      y: 0,\n      fftData: []\n    }\n\n    this.handleMouseMove = this.handleMouseMove.bind(this)\n    this.handleStart = this.handleStart.bind(this)\n    this.handleStop = this.handleStop.bind(this)\n    this.handleStartOrStopClick = this.handleStartOrStopClick.bind(this)\n    this.changeFrequency = this.changeFrequency.bind(this)\n    this.changeDetune = this.changeDetune.bind(this)\n    this.changeVisualization = this.changeVisualization.bind(this)\n    this.handleSynthPlay = this.handleSynthPlay.bind(this)\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousemove', this.handleMouseMove)\n  }\n\n  handleMouseMove(e) {\n    this.setState({\n      x: e.clientX,\n      y: e.clientY\n    })\n\n    this.changeFrequency()\n    this.changeDetune()\n    this.changeVisualization()\n  }\n\n  handleStartOrStopClick() {\n    let { playing } = this.state\n\n    if (playing) {\n      this.handleStop()\n    } else {\n      this.handleStart()\n    }\n  }\n\n  // handleSynthPlay() {\n  //   // let synth = new Tone.Synth().toMaster()\n  //   // synth.triggerAttackRelease('C4', '8n')\n  //\n  //   //pattern\n  //   // let pattern = new Tone.Pattern(\n  //   //   function(time, note) {\n  //   //     synth.triggerAttackRelease(note, 0.25)\n  //   //   },\n  //   //   ['C4', 'D4', 'E4', 'G4', 'A4']\n  //   // )\n  //   // pattern.start(0)\n  //\n  //   //loop\n  //   // let loop = new Tone.Loop(function(time) {\n  //   //   synth.triggerAttackRelease('C2', '8n', time)\n  //   // }, '4n')\n  //   // loop.start('1m').stop('4m')\n  //\n  //   //pass in some initial values for the filter and filter envelope\n  //   // var synth = new Tone.Synth({\n  //   //   oscillator: {\n  //   //     type: 'pwm',\n  //   //     modulationFrequency: 0.2\n  //   //   },\n  //   //   envelope: {\n  //   //     attack: 0.02,\n  //   //     decay: 0.1,\n  //   //     sustain: 0.2,\n  //   //     release: 0.9\n  //   //   }\n  //   // }).toMaster()\n  //   //\n  //   // //start the note \"D3\" one second from now\n  //   // synth.triggerAttack('D3', '+1')\n  //\n  //   //a 4 voice Synth\n  //   // let polySynth = new Tone.PolySynth(4, Tone.Synth).toMaster()\n  //   // polySynth.triggerAttackRelease(['C4', 'E4', 'G4', 'B4'], '2n')\n  //   // let distortion = new Tone.Distortion(0.4).toMaster()\n  //   // polySynth.connect(distortion)\n  //\n  //   // Tone.Transport.scheduleRepeat(\n  //   //   function(time) {\n  //   //     note.triggerAttack(time)\n  //   //   },\n  //   //   '8n',\n  //   //   '1m'\n  //   // )\n  //\n  //   //toner\n  //   // Tone.Transport.bpm.value = 120\n  //   // Tone.Transport.start()\n  // }\n  handleSynthPlay() {\n    let loopBeat = new Tone.Loop(beat, '3n')\n    let baseBeat = new Tone.MembraneSynth({\n      pitchDecay: 0.01,\n      octaves: 2,\n      oscillator: {\n        type: 'sine'\n      },\n      envelope: {\n        attack: 0.1,\n        decay: 0.4,\n        sustain: 1,\n        release: 1.4,\n        attackCurve: 'sine'\n      }\n    }).toMaster()\n    let drums\n    let noise = new Tone.NoiseSynth({\n      noise: {\n        type: 'brown'\n      },\n      envelope: {\n        attack: 1.5,\n        decay: 0.01,\n        sustain: 1\n      },\n      volume: -5\n    }).toMaster()\n    let metal = new Tone.MetalSynth({\n      frequency: 100,\n      envelope: {\n        attack: 0.01,\n        decay: 1.2,\n        release: 0.2\n      },\n      harmonicity: 19,\n      modulationIndex: 20,\n      resonance: 300,\n      octaves: 3\n    }).toMaster()\n\n    function beat(time) {\n      baseBeat.triggerAttackRelease('B#2', '4n', time)\n      noise.triggerAttackRelease(time)\n      metal.triggerAttackRelease('6n', time)\n    }\n\n    Tone.Transport.start()\n    loopBeat.start(0)\n  }\n\n  handleStart() {\n    let { audioContext, oscillator, analyser, x, y } = this.state\n\n    oscillator = audioContext.createOscillator()\n    oscillator.type = 'sine'\n    oscillator.frequency.setValueAtTime(x, audioContext.currentTime)\n\n    oscillator.connect(audioContext.destination)\n    oscillator.start()\n\n    analyser = audioContext.createAnalyser()\n    analyser.fftSize = 2048\n    oscillator.connect(analyser)\n\n    this.setState({\n      oscillator: oscillator,\n      analyser: analyser,\n      playing: true\n    })\n  }\n\n  handleStop() {\n    let { oscillator } = this.state\n    oscillator.stop()\n\n    this.setState({\n      oscillator: oscillator,\n      playing: false\n    })\n  }\n\n  changeFrequency() {\n    let { audioContext, oscillator, x, y } = this.state\n    oscillator.frequency.setValueAtTime(x, audioContext.currentTime)\n  }\n\n  changeDetune() {\n    let { audioContext, oscillator, x, y } = this.state\n    oscillator.detune.setValueAtTime(y, audioContext.currentTime)\n  }\n\n  changeVisualization() {\n    const { analyser, playing } = this.state\n\n    if (playing) {\n      const bufferLength = analyser.frequencyBinCount\n      let dataArray = new Uint8Array(bufferLength)\n      analyser.getByteTimeDomainData(dataArray)\n\n      this.setState({\n        fftData: dataArray\n      })\n    }\n  }\n\n  render() {\n    const { playing, analyser, fftData } = this.state\n    let button = 'Start'\n    const data = analyser.frequencyBinCount\n\n    if (playing) {\n      button = 'Stop'\n    }\n\n    let elements = []\n\n    if (fftData != undefined) {\n      fftData.map(function(fftParam, i) {\n        elements.push(\n          <div\n            key={i}\n            className=\"analyserCol\"\n            style={{ height: fftParam + 'px' }}\n          />\n        )\n      })\n    }\n\n    return (\n      <div>\n        <div onClick={this.handleSynthPlay}>Synth</div>\n        <div onClick={this.handleStartOrStopClick}> {button}</div>\n        <div className=\"analyser\">{elements}</div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}