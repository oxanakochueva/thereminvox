{"ast":null,"code":"var _jsxFileName = \"/Users/oxana/thereminvox/app/javascript/components/synths/NotesSynth.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport Tone from 'tone';\nimport PlaySwitch from '../controls/PlaySwitch';\nimport ToggleSwitch from '../controls/ToggleSwitch';\nimport Slider from '../controls/Slider';\nimport Knob from '../controls/Knob';\nimport ButtonSet from '../controls/ButtonSet';\n\nvar NotesSynth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NotesSynth, _React$Component);\n\n  function NotesSynth(props) {\n    var _this;\n\n    _classCallCheck(this, NotesSynth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NotesSynth).call(this, props));\n\n    _.bindAll(_assertThisInitialized(_this), 'handleValueChange');\n\n    return _this;\n  }\n\n  _createClass(NotesSynth, [{\n    key: \"handleValueChange\",\n    value: function handleValueChange(name, property, value) {\n      var changeSynthValue = this.props.changeSynthValue;\n      changeSynthValue(name, property, value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          synth = _this$props.synth,\n          instrument = _this$props.instrument,\n          on = _this$props.on,\n          togglePlay = _this$props.togglePlay;\n      var _instrument$voices$0$ = instrument.voices[0].oscillator,\n          type = _instrument$voices$0$.type,\n          count = _instrument$voices$0$.count,\n          spread = _instrument$voices$0$.spread,\n          frequency = _instrument$voices$0$.frequency,\n          detune = _instrument$voices$0$.detune,\n          partialCount = _instrument$voices$0$.partialCount;\n      var setWave = ['sine', 'square', 'triangle', 'sawtooth', 'fatsawtooth'];\n      return React.createElement(\"div\", {\n        className: \"innerContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"playButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(ToggleSwitch, {\n        value: \"play\",\n        current: on,\n        handleClick: togglePlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })), React.createElement(ButtonSet, {\n        name: synth,\n        property: \"oscillator.type.value\",\n        set: setWave,\n        value: type,\n        handleValueChange: this.handleValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(Slider, {\n        name: synth,\n        property: \"oscillator.count\",\n        min: \"0\",\n        max: \"100\",\n        value: count,\n        handleValueChange: this.handleValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), React.createElement(Slider, {\n        name: synth,\n        property: \"oscillator.spread\",\n        min: \"0\",\n        max: \"100\",\n        value: spread,\n        handleValueChange: this.handleValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(Slider, {\n        name: synth,\n        property: \"oscillator.frequency.value\",\n        min: \"0\",\n        max: \"5000\",\n        value: frequency,\n        handleValueChange: this.handleValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(Slider, {\n        name: synth,\n        property: \"oscillator.detune.value\",\n        min: \"0\",\n        max: \"10\",\n        value: detune,\n        handleValueChange: this.handleValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(Slider, {\n        name: synth,\n        property: \"oscillator.partialCount.value\",\n        min: \"0\",\n        max: \"100\",\n        value: partialCount,\n        handleValueChange: this.handleValueChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return NotesSynth;\n}(React.Component);\n\nexport { NotesSynth as default };","map":{"version":3,"sources":["/Users/oxana/thereminvox/app/javascript/components/synths/NotesSynth.jsx"],"names":["_","React","Tone","PlaySwitch","ToggleSwitch","Slider","Knob","ButtonSet","NotesSynth","props","bindAll","name","property","value","changeSynthValue","synth","instrument","on","togglePlay","voices","oscillator","type","count","spread","frequency","detune","partialCount","setWave","handleValueChange","Component"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport Tone from 'tone'\n\nimport PlaySwitch from '../controls/PlaySwitch'\nimport ToggleSwitch from '../controls/ToggleSwitch'\nimport Slider from '../controls/Slider'\nimport Knob from '../controls/Knob'\nimport ButtonSet from '../controls/ButtonSet'\n\nexport default class NotesSynth extends React.Component {\n  constructor(props) {\n    super(props)\n    _.bindAll(this, 'handleValueChange')\n  }\n\n  handleValueChange(name, property, value) {\n    const { changeSynthValue } = this.props\n    changeSynthValue(name, property, value)\n  }\n\n  render() {\n    const { synth, instrument, on, togglePlay } = this.props\n\n    const {\n      type,\n      count,\n      spread,\n      frequency,\n      detune,\n      partialCount\n    } = instrument.voices[0].oscillator\n\n    const setWave = ['sine', 'square', 'triangle', 'sawtooth', 'fatsawtooth']\n\n    return (\n      <div className=\"innerContainer\">\n        <div className=\"playButton\">\n          <ToggleSwitch value=\"play\" current={on} handleClick={togglePlay} />\n        </div>\n        <ButtonSet\n          name={synth}\n          property=\"oscillator.type.value\"\n          set={setWave}\n          value={type}\n          handleValueChange={this.handleValueChange}\n        />\n        <Slider\n          name={synth}\n          property=\"oscillator.count\"\n          min=\"0\"\n          max=\"100\"\n          value={count}\n          handleValueChange={this.handleValueChange}\n        />\n        <Slider\n          name={synth}\n          property=\"oscillator.spread\"\n          min=\"0\"\n          max=\"100\"\n          value={spread}\n          handleValueChange={this.handleValueChange}\n        />\n        <Slider\n          name={synth}\n          property=\"oscillator.frequency.value\"\n          min=\"0\"\n          max=\"5000\"\n          value={frequency}\n          handleValueChange={this.handleValueChange}\n        />\n        <Slider\n          name={synth}\n          property=\"oscillator.detune.value\"\n          min=\"0\"\n          max=\"10\"\n          value={detune}\n          handleValueChange={this.handleValueChange}\n        />\n        <Slider\n          name={synth}\n          property=\"oscillator.partialCount.value\"\n          min=\"0\"\n          max=\"100\"\n          value={partialCount}\n          handleValueChange={this.handleValueChange}\n        />\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}