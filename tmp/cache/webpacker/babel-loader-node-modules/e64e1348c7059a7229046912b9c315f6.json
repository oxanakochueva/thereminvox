{"ast":null,"code":"var _jsxFileName = \"/Users/oxana/thereminvox/app/javascript/containers/Thereminvox.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport Menubar from '../components/Menubar';\n\nvar Thereminvox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Thereminvox, _React$Component);\n\n  function Thereminvox(props) {\n    var _this;\n\n    _classCallCheck(this, Thereminvox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Thereminvox).call(this, props));\n    var audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    var oscillator = audioContext.createOscillator();\n    oscillator.type = 'square';\n    var analyser = audioContext.createAnalyser();\n    _this.state = {\n      audioContext: audioContext,\n      oscillator: oscillator,\n      analyser: analyser,\n      playing: false,\n      x: 0,\n      y: 0,\n      fftData: []\n    };\n    _this.handleMouseMove = _this.handleMouseMove.bind(_assertThisInitialized(_this));\n    _this.handleStart = _this.handleStart.bind(_assertThisInitialized(_this));\n    _this.handleStop = _this.handleStop.bind(_assertThisInitialized(_this));\n    _this.handleStartOrStopClick = _this.handleStartOrStopClick.bind(_assertThisInitialized(_this));\n    _this.changeFrequency = _this.changeFrequency.bind(_assertThisInitialized(_this));\n    _this.changeDetune = _this.changeDetune.bind(_assertThisInitialized(_this));\n    _this.changeVisualization = _this.changeVisualization.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Thereminvox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousemove', this.handleMouseMove);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(e) {\n      this.setState({\n        x: e.clientX,\n        y: e.clientY\n      });\n      this.changeFrequency();\n      this.changeDetune();\n      this.changeVisualization();\n    }\n  }, {\n    key: \"handleStartOrStopClick\",\n    value: function handleStartOrStopClick() {\n      var playing = this.state.playing;\n\n      if (playing) {\n        this.handleStop();\n      } else {\n        this.handleStart();\n      }\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var _this$state = this.state,\n          audioContext = _this$state.audioContext,\n          oscillator = _this$state.oscillator,\n          analyser = _this$state.analyser,\n          x = _this$state.x,\n          y = _this$state.y;\n      oscillator = audioContext.createOscillator();\n      oscillator.type = 'square';\n      oscillator.frequency.setValueAtTime(x, audioContext.currentTime);\n      oscillator.connect(audioContext.destination);\n      oscillator.start();\n      analyser = audioContext.createAnalyser();\n      analyser.fftSize = 2048;\n      oscillator.connect(analyser);\n      this.setState({\n        oscillator: oscillator,\n        analyser: analyser,\n        playing: true\n      });\n    }\n  }, {\n    key: \"handleStop\",\n    value: function handleStop() {\n      var oscillator = this.state.oscillator;\n      oscillator.stop();\n      this.setState({\n        oscillator: oscillator,\n        playing: false\n      });\n    }\n  }, {\n    key: \"changeFrequency\",\n    value: function changeFrequency() {\n      var _this$state2 = this.state,\n          audioContext = _this$state2.audioContext,\n          oscillator = _this$state2.oscillator,\n          x = _this$state2.x,\n          y = _this$state2.y;\n      oscillator.frequency.setValueAtTime(x, audioContext.currentTime);\n    }\n  }, {\n    key: \"changeDetune\",\n    value: function changeDetune() {\n      var _this$state3 = this.state,\n          audioContext = _this$state3.audioContext,\n          oscillator = _this$state3.oscillator,\n          x = _this$state3.x,\n          y = _this$state3.y;\n      oscillator.detune.setValueAtTime(y, audioContext.currentTime);\n    }\n  }, {\n    key: \"changeVisualization\",\n    value: function changeVisualization() {\n      var analyser = this.state.analyser;\n      var bufferLength = analyser.frequencyBinCount;\n      var dataArray = new Uint8Array(bufferLength);\n      var fftData = analyser.getByTimeDomainData(dataArray);\n      this.setState({\n        fftData: fftData\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state4 = this.state,\n          playing = _this$state4.playing,\n          analyser = _this$state4.analyser,\n          fftData = _this$state4.fftData;\n      var button = 'Start';\n      var data = analyser.frequencyBinCount;\n\n      if (playing) {\n        button = 'Stop';\n      }\n\n      var elements = [];\n      fftData.map(function (fftParam, i) {\n        elements.push(React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, fftParam));\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.handleStartOrStopClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \" \", button));\n    }\n  }]);\n\n  return Thereminvox;\n}(React.Component);\n\nexport { Thereminvox as default };","map":{"version":3,"sources":["/Users/oxana/thereminvox/app/javascript/containers/Thereminvox.jsx"],"names":["React","Menubar","Thereminvox","props","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","type","analyser","createAnalyser","state","playing","x","y","fftData","handleMouseMove","bind","handleStart","handleStop","handleStartOrStopClick","changeFrequency","changeDetune","changeVisualization","document","addEventListener","e","setState","clientX","clientY","frequency","setValueAtTime","currentTime","connect","destination","start","fftSize","stop","detune","bufferLength","frequencyBinCount","dataArray","Uint8Array","getByTimeDomainData","button","data","elements","map","fftParam","i","push","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Menubar from '../components/Menubar'\n\nexport default class Thereminvox extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)()\n    let oscillator = audioContext.createOscillator()\n    oscillator.type = 'square'\n\n    var analyser = audioContext.createAnalyser()\n\n    this.state = {\n      audioContext: audioContext,\n      oscillator: oscillator,\n      analyser: analyser,\n      playing: false,\n      x: 0,\n      y: 0,\n      fftData: []\n    }\n\n    this.handleMouseMove = this.handleMouseMove.bind(this)\n    this.handleStart = this.handleStart.bind(this)\n    this.handleStop = this.handleStop.bind(this)\n    this.handleStartOrStopClick = this.handleStartOrStopClick.bind(this)\n    this.changeFrequency = this.changeFrequency.bind(this)\n    this.changeDetune = this.changeDetune.bind(this)\n    this.changeVisualization = this.changeVisualization.bind(this)\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousemove', this.handleMouseMove)\n  }\n\n  handleMouseMove(e) {\n    this.setState({\n      x: e.clientX,\n      y: e.clientY\n    })\n\n    this.changeFrequency()\n    this.changeDetune()\n    this.changeVisualization()\n  }\n\n  handleStartOrStopClick() {\n    let { playing } = this.state\n\n    if (playing) {\n      this.handleStop()\n    } else {\n      this.handleStart()\n    }\n  }\n\n  handleStart() {\n    let { audioContext, oscillator, analyser, x, y } = this.state\n\n    oscillator = audioContext.createOscillator()\n    oscillator.type = 'square'\n    oscillator.frequency.setValueAtTime(x, audioContext.currentTime)\n\n    oscillator.connect(audioContext.destination)\n    oscillator.start()\n\n    analyser = audioContext.createAnalyser()\n    analyser.fftSize = 2048\n    oscillator.connect(analyser)\n\n    this.setState({\n      oscillator: oscillator,\n      analyser: analyser,\n      playing: true\n    })\n  }\n\n  handleStop() {\n    let { oscillator } = this.state\n    oscillator.stop()\n\n    this.setState({\n      oscillator: oscillator,\n      playing: false\n    })\n  }\n\n  changeFrequency() {\n    let { audioContext, oscillator, x, y } = this.state\n    oscillator.frequency.setValueAtTime(x, audioContext.currentTime)\n  }\n\n  changeDetune() {\n    let { audioContext, oscillator, x, y } = this.state\n    oscillator.detune.setValueAtTime(y, audioContext.currentTime)\n  }\n\n  changeVisualization() {\n    const { analyser } = this.state\n    const bufferLength = analyser.frequencyBinCount\n    const dataArray = new Uint8Array(bufferLength)\n    const fftData = analyser.getByTimeDomainData(dataArray)\n\n    this.setState({\n      fftData: fftData\n    })\n  }\n\n  render() {\n    const { playing, analyser, fftData } = this.state\n    let button = 'Start'\n    const data = analyser.frequencyBinCount\n\n    if (playing) {\n      button = 'Stop'\n    }\n\n    let elements = []\n\n    fftData.map(function(fftParam, i) {\n      elements.push(<div key={i}>{fftParam}</div>)\n    })\n\n    return (\n      <div>\n        <div onClick={this.handleStartOrStopClick}> {button}</div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}