{"ast":null,"code":"var _jsxFileName = \"/Users/oxana/thereminvox/app/javascript/containers/Synth.jsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport Tone from 'tone';\nimport * as effects from '../tunes/effects';\nimport * as parts from '../tunes/parts';\nimport * as synths from '../tunes/synths';\nimport AutoFilter from '../components/effects/AutoFilter';\nimport AutoPanner from '../components/effects/AutoPanner';\nimport AutoWah from '../components/effects/AutoWah';\nimport BitCrusher from '../components/effects/BitCrusher';\nimport Chebyshev from '../components/effects/Chebyshev';\nimport Chorus from '../components/effects/Chorus';\nimport Distortion from '../components/effects/Distortion';\nimport FeedbackDelay from '../components/effects/FeedbackDelay';\nimport FeedbackEffect from '../components/effects/FeedbackEffect';\nimport Freeverb from '../components/effects/Freeverb';\nimport JcReverb from '../components/effects/JcReverb';\nimport Phaser from '../components/effects/Phaser';\nimport PingPongDelay from '../components/effects/PingPongDelay';\nimport PitchShift from '../components/effects/PitchShift';\nimport Reverb from '../components/effects/Reverb';\nimport StereoWidener from '../components/effects/StereoWidener';\nimport Tremolo from '../components/effects/Tremolo';\nimport Vibrato from '../components/effects/Vibrato'; // import PartSynth from '../components/synths/PartSynth'\n// import NoiseSynth from '../components/synths/NoiseSynth'\n\nimport PolySynth from '../components/synths/PolySynth';\nimport MetalSynth from '../components/synths/MetalSynth';\n\nvar Synth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Synth, _React$Component);\n\n  function Synth(props) {\n    var _this;\n\n    _classCallCheck(this, Synth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Synth).call(this, props));\n    var defaultWetValue = 0;\n    var metalSynth = synths.metalSynth();\n    var metalAutoFilter = effects.autoFilter();\n    var metalChorus = effects.chorus();\n    var metalDistortion = effects.distortion();\n    var metalFeedbackDelay = effects.feedbackDelay();\n    var metalFreeverb = effects.freeverb();\n    var metalPhaser = effects.phaser();\n    var metalPingPongDelay = effects.pingPongDelay();\n    var leadSynth = synths.polySynth();\n    var leadAutoPanner = effects.autoPanner();\n    var leadChebyshev = effects.chebyshev();\n    var leadDistortion = effects.distortion();\n    var leadFeedbackEffect = effects.feedbackEffect();\n    var leadVibrato = effects.vibrato();\n    var loop1 = new Tone.Loop(function (time) {\n      ambientSynth.triggerAttackRelease('C2', '8n', time);\n    }, '4n');\n    var loop3 = new Tone.Loop(function (time) {\n      leadSynth.triggerAttackRelease('C4', '1m', time);\n    }, '1m');\n    metalSynth.chain(metalAutoFilter, metalChorus, metalDistortion, metalFeedbackDelay, metalFreeverb, metalPhaser, metalPingPongDelay, Tone.Master);\n    metalPingPongDelay.toMaster();\n    leadSynth.chain(leadAutoPanner, leadChebyshev, leadDistortion, leadFeedbackEffect, leadVibrato, Tone.Master);\n    _this.state = {\n      metalSynth: metalSynth,\n      metalAutoFilter: {\n        name: 'metalAutoFilter',\n        effect: metalAutoFilter,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalChorus: {\n        name: 'metalChorus',\n        effect: metalChorus,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalDistortion: {\n        name: 'metalDistortion',\n        effect: metalDistortion,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalFeedbackDelay: {\n        name: 'metalFeedbackDelay',\n        effect: metalFeedbackDelay,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalFreeverb: {\n        name: 'metalFreeverb',\n        effect: metalFreeverb,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalPhaser: {\n        name: 'metalPhaser',\n        effect: metalPhaser,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalPingPongDelay: {\n        name: 'metalPingPongDelay',\n        effect: metalPingPongDelay,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadSynth: leadSynth,\n      leadAutoPanner: {\n        name: 'leadAutoPanner',\n        effect: leadAutoPanner,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadChebyshev: {\n        name: 'leadChebyshev',\n        effect: leadChebyshev,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadDistortion: {\n        name: 'leadDistortion',\n        effect: leadDistortion,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadFeedbackEffect: {\n        name: 'leadFeedbackEffect',\n        effect: leadFeedbackEffect,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadVibrato: {\n        name: 'leadVibrato',\n        effect: leadVibrato,\n        wet: defaultWetValue,\n        on: false\n      },\n      loop1: {\n        loop: loop1,\n        on: false\n      },\n      loop3: {\n        loop: loop3,\n        on: false\n      },\n      part1: {\n        part: parts.part1(leadSynth),\n        on: false\n      },\n      lastChange: Date.now(),\n      timeout: 100\n    };\n\n    _.bindAll(_assertThisInitialized(_this), 'toggleLoop', 'togglePart', 'changeSynthValue', 'toggleEffect', 'changeEffectWetValue', 'changeEffectValue');\n\n    Tone.Transport.bpm.value = 130;\n    Tone.Transport.start();\n    return _this;\n  }\n\n  _createClass(Synth, [{\n    key: \"toggleLoop\",\n    value: function toggleLoop(loopName) {\n      var _this$state$loopName = this.state[loopName],\n          loop = _this$state$loopName.loop,\n          on = _this$state$loopName.on;\n      on == true ? loop.stop() : loop.start('0m');\n      this.setState(_defineProperty({}, \"\".concat(loopName), {\n        loop: loop,\n        on: !on\n      }));\n    }\n  }, {\n    key: \"togglePart\",\n    value: function togglePart(partName) {\n      var _this$state$partName = this.state[partName],\n          part = _this$state$partName.part,\n          on = _this$state$partName.on;\n\n      if (on == true) {\n        part.stop();\n      } else {\n        console.log('yo');\n        part.at('1m');\n        part.start(0);\n        part.loop = true;\n        part.loopEnd = '8m';\n      }\n\n      this.setState(_defineProperty({}, \"\".concat(partName), {\n        part: part,\n        on: !on\n      }));\n    }\n  }, {\n    key: \"changeSynthValue\",\n    value: function changeSynthValue(synthName, effectName, value) {\n      var synth = this.state[synthName];\n      var envelope = synth.instrument.envelope;\n      envelope[effectName] = value;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        oscillator: synth.instrument.oscillator,\n        envelope: envelope\n      }));\n    }\n  }, {\n    key: \"toggleEffect\",\n    value: function toggleEffect(effectName) {\n      var _this$state$effectNam = this.state[effectName],\n          effect = _this$state$effectNam.effect,\n          wet = _this$state$effectNam.wet,\n          on = _this$state$effectNam.on;\n      effect.wet.value = on == true ? 0 : wet;\n      on = !on;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        effect: effect,\n        wet: wet,\n        on: on\n      }));\n    }\n  }, {\n    key: \"changeEffectWetValue\",\n    value: function changeEffectWetValue(effectName, value) {\n      var _this$state$effectNam2 = this.state[effectName],\n          effect = _this$state$effectNam2.effect,\n          wet = _this$state$effectNam2.wet,\n          on = _this$state$effectNam2.on;\n      effect.wet.value = on == true ? value : 0;\n      wet = value;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        effect: effect,\n        wet: wet,\n        on: on\n      }));\n    }\n  }, {\n    key: \"changeEffectValue\",\n    value: function changeEffectValue(effectName, effectProperty, value) {\n      var _this$state$effectNam3 = this.state[effectName],\n          name = _this$state$effectNam3.name,\n          effect = _this$state$effectNam3.effect,\n          wet = _this$state$effectNam3.wet,\n          on = _this$state$effectNam3.on;\n\n      if (effectProperty == 'order') {\n        value = Math.round(value);\n      }\n\n      effect[effectProperty] = value;\n      this.setState(_defineProperty({}, \"\".concat(effectName), {\n        name: name,\n        effect: effect,\n        wet: wet,\n        on: on\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          leadSynth = _this$state.leadSynth,\n          leadAutoPanner = _this$state.leadAutoPanner,\n          leadChebyshev = _this$state.leadChebyshev,\n          leadDistortion = _this$state.leadDistortion,\n          leadFeedbackEffect = _this$state.leadFeedbackEffect,\n          leadVibrato = _this$state.leadVibrato,\n          metalSynth = _this$state.metalSynth,\n          metalAutoFilter = _this$state.metalAutoFilter,\n          metalChorus = _this$state.metalChorus,\n          metalDistortion = _this$state.metalDistortion,\n          metalFeedbackDelay = _this$state.metalFeedbackDelay,\n          metalFreeverb = _this$state.metalFreeverb,\n          metalPhaser = _this$state.metalPhaser,\n          metalPingPongDelay = _this$state.metalPingPongDelay,\n          loop1 = _this$state.loop1,\n          part1 = _this$state.part1;\n      var _toggleEffect = this.toggleEffect,\n          toggleLoop = this.toggleLoop,\n          togglePart = this.togglePart,\n          changeSynthValue = this.changeSynthValue,\n          changeEffectWetValue = this.changeEffectWetValue,\n          changeEffectValue = this.changeEffectValue,\n          changeEffectFilterValue = this.changeEffectFilterValue;\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"yellowSynth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(MetalSynth, {\n        synth: \"metalSynth\",\n        instrument: metalSynth,\n        on: loop1.on,\n        togglePlay: function togglePlay() {\n          return toggleLoop('loop1');\n        },\n        changeSynthValue: this.changeSynthValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }), React.createElement(AutoFilter, Object.assign({}, metalAutoFilter, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('metalAutoFilter');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      })), React.createElement(Chorus, Object.assign({}, metalChorus, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('metalChorus');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      })), React.createElement(Distortion, Object.assign({}, metalDistortion, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('metalDistortion');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      })), React.createElement(FeedbackDelay, Object.assign({}, metalFeedbackDelay, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('metalFeedbackDelay');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      })), React.createElement(Freeverb, Object.assign({}, metalFreeverb, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('metalFreeverb');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      })), React.createElement(Phaser, Object.assign({}, metalPhaser, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('metalPhaser');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      })), React.createElement(PingPongDelay, Object.assign({}, metalPingPongDelay, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('metalPingPongDelay');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"whiteSynth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, React.createElement(PolySynth, {\n        synth: \"leadSynth\",\n        instrument: leadSynth,\n        on: part1.on,\n        togglePlay: function togglePlay() {\n          return togglePart('part1');\n        },\n        changeSynthValue: changeSynthValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }), React.createElement(AutoPanner, Object.assign({}, leadAutoPanner, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadAutoPanner');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      })), React.createElement(Chebyshev, Object.assign({}, leadChebyshev, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadChebyshev');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      })), React.createElement(Distortion, Object.assign({}, leadDistortion, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadDistortion');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      })), React.createElement(FeedbackEffect, Object.assign({}, leadFeedbackEffect, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadFeedbackEffect');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      })), React.createElement(Vibrato, Object.assign({}, leadVibrato, {\n        toggleEffect: function toggleEffect() {\n          return _toggleEffect('leadVibrato');\n        },\n        changeEffectWetValue: changeEffectWetValue,\n        changeEffectValue: changeEffectValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Synth;\n}(React.Component);\n\nexport { Synth as default };","map":{"version":3,"sources":["/Users/oxana/thereminvox/app/javascript/containers/Synth.jsx"],"names":["_","React","Tone","effects","parts","synths","AutoFilter","AutoPanner","AutoWah","BitCrusher","Chebyshev","Chorus","Distortion","FeedbackDelay","FeedbackEffect","Freeverb","JcReverb","Phaser","PingPongDelay","PitchShift","Reverb","StereoWidener","Tremolo","Vibrato","PolySynth","MetalSynth","Synth","props","defaultWetValue","metalSynth","metalAutoFilter","autoFilter","metalChorus","chorus","metalDistortion","distortion","metalFeedbackDelay","feedbackDelay","metalFreeverb","freeverb","metalPhaser","phaser","metalPingPongDelay","pingPongDelay","leadSynth","polySynth","leadAutoPanner","autoPanner","leadChebyshev","chebyshev","leadDistortion","leadFeedbackEffect","feedbackEffect","leadVibrato","vibrato","loop1","Loop","time","ambientSynth","triggerAttackRelease","loop3","chain","Master","toMaster","state","name","effect","wet","on","loop","part1","part","lastChange","Date","now","timeout","bindAll","Transport","bpm","value","start","loopName","stop","setState","partName","console","log","at","loopEnd","synthName","effectName","synth","envelope","instrument","oscillator","effectProperty","Math","round","toggleEffect","toggleLoop","togglePart","changeSynthValue","changeEffectWetValue","changeEffectValue","changeEffectFilterValue","Component"],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport React from 'react'\nimport Tone from 'tone'\n\nimport * as effects from '../tunes/effects'\nimport * as parts from '../tunes/parts'\nimport * as synths from '../tunes/synths'\n\nimport AutoFilter from '../components/effects/AutoFilter'\nimport AutoPanner from '../components/effects/AutoPanner'\nimport AutoWah from '../components/effects/AutoWah'\nimport BitCrusher from '../components/effects/BitCrusher'\nimport Chebyshev from '../components/effects/Chebyshev'\nimport Chorus from '../components/effects/Chorus'\nimport Distortion from '../components/effects/Distortion'\nimport FeedbackDelay from '../components/effects/FeedbackDelay'\nimport FeedbackEffect from '../components/effects/FeedbackEffect'\nimport Freeverb from '../components/effects/Freeverb'\nimport JcReverb from '../components/effects/JcReverb'\nimport Phaser from '../components/effects/Phaser'\nimport PingPongDelay from '../components/effects/PingPongDelay'\nimport PitchShift from '../components/effects/PitchShift'\nimport Reverb from '../components/effects/Reverb'\nimport StereoWidener from '../components/effects/StereoWidener'\nimport Tremolo from '../components/effects/Tremolo'\nimport Vibrato from '../components/effects/Vibrato'\n\n// import PartSynth from '../components/synths/PartSynth'\n// import NoiseSynth from '../components/synths/NoiseSynth'\nimport PolySynth from '../components/synths/PolySynth'\nimport MetalSynth from '../components/synths/MetalSynth'\n\nexport default class Synth extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const defaultWetValue = 0\n\n    let metalSynth = synths.metalSynth()\n    let metalAutoFilter = effects.autoFilter()\n    let metalChorus = effects.chorus()\n    let metalDistortion = effects.distortion()\n    let metalFeedbackDelay = effects.feedbackDelay()\n    let metalFreeverb = effects.freeverb()\n    let metalPhaser = effects.phaser()\n    let metalPingPongDelay = effects.pingPongDelay()\n\n    let leadSynth = synths.polySynth()\n    let leadAutoPanner = effects.autoPanner()\n    let leadChebyshev = effects.chebyshev()\n    let leadDistortion = effects.distortion()\n    let leadFeedbackEffect = effects.feedbackEffect()\n    let leadVibrato = effects.vibrato()\n\n    let loop1 = new Tone.Loop(function(time) {\n      ambientSynth.triggerAttackRelease('C2', '8n', time)\n    }, '4n')\n\n    let loop3 = new Tone.Loop(function(time) {\n      leadSynth.triggerAttackRelease('C4', '1m', time)\n    }, '1m')\n\n    metalSynth.chain(\n      metalAutoFilter,\n      metalChorus,\n      metalDistortion,\n      metalFeedbackDelay,\n      metalFreeverb,\n      metalPhaser,\n      metalPingPongDelay,\n      Tone.Master\n    )\n    metalPingPongDelay.toMaster()\n\n    leadSynth.chain(\n      leadAutoPanner,\n      leadChebyshev,\n      leadDistortion,\n      leadFeedbackEffect,\n      leadVibrato,\n      Tone.Master\n    )\n\n    this.state = {\n      metalSynth,\n      metalAutoFilter: {\n        name: 'metalAutoFilter',\n        effect: metalAutoFilter,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalChorus: {\n        name: 'metalChorus',\n        effect: metalChorus,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalDistortion: {\n        name: 'metalDistortion',\n        effect: metalDistortion,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalFeedbackDelay: {\n        name: 'metalFeedbackDelay',\n        effect: metalFeedbackDelay,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalFreeverb: {\n        name: 'metalFreeverb',\n        effect: metalFreeverb,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalPhaser: {\n        name: 'metalPhaser',\n        effect: metalPhaser,\n        wet: defaultWetValue,\n        on: false\n      },\n      metalPingPongDelay: {\n        name: 'metalPingPongDelay',\n        effect: metalPingPongDelay,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadSynth,\n      leadAutoPanner: {\n        name: 'leadAutoPanner',\n        effect: leadAutoPanner,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadChebyshev: {\n        name: 'leadChebyshev',\n        effect: leadChebyshev,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadDistortion: {\n        name: 'leadDistortion',\n        effect: leadDistortion,\n        wet: defaultWetValue,\n        on: false\n      },\n      leadFeedbackEffect: {\n        name: 'leadFeedbackEffect',\n        effect: leadFeedbackEffect,\n        wet: defaultWetValue,\n        on: false\n      },\n\n      leadVibrato: {\n        name: 'leadVibrato',\n        effect: leadVibrato,\n        wet: defaultWetValue,\n        on: false\n      },\n      loop1: {\n        loop: loop1,\n        on: false\n      },\n      loop3: {\n        loop: loop3,\n        on: false\n      },\n      part1: {\n        part: parts.part1(leadSynth),\n        on: false\n      },\n      lastChange: Date.now(),\n      timeout: 100\n    }\n\n    _.bindAll(\n      this,\n      'toggleLoop',\n      'togglePart',\n      'changeSynthValue',\n      'toggleEffect',\n      'changeEffectWetValue',\n      'changeEffectValue'\n    )\n\n    Tone.Transport.bpm.value = 130\n\n    Tone.Transport.start()\n  }\n\n  toggleLoop(loopName) {\n    let { loop, on } = this.state[loopName]\n\n    on == true ? loop.stop() : loop.start('0m')\n\n    this.setState({\n      [`${loopName}`]: {\n        loop: loop,\n        on: !on\n      }\n    })\n  }\n\n  togglePart(partName) {\n    let { part, on } = this.state[partName]\n\n    if (on == true) {\n      part.stop()\n    } else {\n      console.log('yo')\n      part.at('1m')\n      part.start(0)\n      part.loop = true\n      part.loopEnd = '8m'\n    }\n\n    this.setState({\n      [`${partName}`]: {\n        part: part,\n        on: !on\n      }\n    })\n  }\n\n  changeSynthValue(synthName, effectName, value) {\n    let synth = this.state[synthName]\n    let envelope = synth.instrument.envelope\n    envelope[effectName] = value\n\n    this.setState({\n      [`${effectName}`]: {\n        oscillator: synth.instrument.oscillator,\n        envelope: envelope\n      }\n    })\n  }\n\n  toggleEffect(effectName) {\n    let { effect, wet, on } = this.state[effectName]\n\n    effect.wet.value = on == true ? 0 : wet\n    on = !on\n\n    this.setState({\n      [`${effectName}`]: {\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n\n  changeEffectWetValue(effectName, value) {\n    let { effect, wet, on } = this.state[effectName]\n\n    effect.wet.value = on == true ? value : 0\n    wet = value\n\n    this.setState({\n      [`${effectName}`]: {\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n  changeEffectValue(effectName, effectProperty, value) {\n    let { name, effect, wet, on } = this.state[effectName]\n\n    if (effectProperty == 'order') {\n      value = Math.round(value)\n    }\n\n    effect[effectProperty] = value\n\n    this.setState({\n      [`${effectName}`]: {\n        name,\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n\n  render() {\n    let {\n      leadSynth,\n      leadAutoPanner,\n      leadChebyshev,\n      leadDistortion,\n      leadFeedbackEffect,\n      leadVibrato,\n      metalSynth,\n      metalAutoFilter,\n      metalChorus,\n      metalDistortion,\n      metalFeedbackDelay,\n      metalFreeverb,\n      metalPhaser,\n      metalPingPongDelay,\n      loop1,\n      part1\n    } = this.state\n\n    let {\n      toggleEffect,\n      toggleLoop,\n      togglePart,\n      changeSynthValue,\n      changeEffectWetValue,\n      changeEffectValue,\n      changeEffectFilterValue\n    } = this\n\n    return (\n      <div className=\"container\">\n        <div className=\"yellowSynth\">\n          <MetalSynth\n            synth=\"metalSynth\"\n            instrument={metalSynth}\n            on={loop1.on}\n            togglePlay={() => toggleLoop('loop1')}\n            changeSynthValue={this.changeSynthValue}\n          />\n          <AutoFilter\n            {...metalAutoFilter}\n            toggleEffect={() => toggleEffect('metalAutoFilter')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <Chorus\n            {...metalChorus}\n            toggleEffect={() => toggleEffect('metalChorus')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <Distortion\n            {...metalDistortion}\n            toggleEffect={() => toggleEffect('metalDistortion')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <FeedbackDelay\n            {...metalFeedbackDelay}\n            toggleEffect={() => toggleEffect('metalFeedbackDelay')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <Freeverb\n            {...metalFreeverb}\n            toggleEffect={() => toggleEffect('metalFreeverb')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <Phaser\n            {...metalPhaser}\n            toggleEffect={() => toggleEffect('metalPhaser')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <PingPongDelay\n            {...metalPingPongDelay}\n            toggleEffect={() => toggleEffect('metalPingPongDelay')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n        </div>\n        <div className=\"whiteSynth\">\n          <PolySynth\n            synth=\"leadSynth\"\n            instrument={leadSynth}\n            on={part1.on}\n            togglePlay={() => togglePart('part1')}\n            changeSynthValue={changeSynthValue}\n          />\n          <AutoPanner\n            {...leadAutoPanner}\n            toggleEffect={() => toggleEffect('leadAutoPanner')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <Chebyshev\n            {...leadChebyshev}\n            toggleEffect={() => toggleEffect('leadChebyshev')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <Distortion\n            {...leadDistortion}\n            toggleEffect={() => toggleEffect('leadDistortion')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <FeedbackEffect\n            {...leadFeedbackEffect}\n            toggleEffect={() => toggleEffect('leadFeedbackEffect')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n          <Vibrato\n            {...leadVibrato}\n            toggleEffect={() => toggleEffect('leadVibrato')}\n            changeEffectWetValue={changeEffectWetValue}\n            changeEffectValue={changeEffectValue}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}